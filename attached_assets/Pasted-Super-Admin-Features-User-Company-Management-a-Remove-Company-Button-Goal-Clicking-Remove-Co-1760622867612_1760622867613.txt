Super Admin Features – User & Company Management
a. Remove Company Button

Goal: Clicking "Remove Company" deletes the company and its related data in the DB.

Implementation:

Add a confirmation modal: "Are you sure you want to delete this company?"

On confirmation:

Delete company entry from companies table.

Cascade delete or remove related entries (users, slots, transactions) if foreign key constraints exist.

Remove the company card from the frontend without page refresh:

setCompanies(prev => prev.filter(c => c.id !== deletedCompanyId));


Ensure only Super Admin sees the "Remove" button.

Tip: Use transactions for database deletion to prevent partial deletes.

b. Conditional Confirm/Cancel

Add a modal with two buttons:

✅ Confirm → triggers deletion

❌ Cancel → closes modal

This prevents accidental removal of companies.

c. Hide Removed Companies Immediately

After deletion:

Update frontend state (useState or Redux) to remove the company card instantly.

No page refresh is needed; the card disappears dynamically.

d. Restrict Active Users from Seeing Certain Options

For Active Users (company-level users):

Hide Super Admin cards.

Hide "Rate" and "Remove" buttons.

Example:

{user.role === 'superadmin' && <button>Remove</button>}

2️⃣ Dashboard Features
Feature	Implementation Notes
🏢 View All Companies	API: /api/companies → return all companies with details
👨‍💼 View Company Admins/Users	Expandable rows or modal to show users for a company
🚫 Suspend / 🔄 Reactivate	Update isActive field in DB, hide options for inactive users
💰 Modify Slot Pricing	Global setting table in DB, update via dashboard form
🗑️ Delete Company	Already covered above
📊 Analytics	Backend aggregates: total companies, users, slots, payments
💳 Payment Tracking	API to fetch all slot purchase transactions
🧾 Activity Logs	Log last login, purchase history, slot updates
3️⃣ Super Admin Form

Problem: Form not showing on user index page.

Solution:

Keep Super Admin login form on a separate route (e.g., /superadmin/login) to prevent regular users from seeing it.

Add a side-link for your access.

<Link to="/superadmin/login">Super Admin Access</Link>


Server-side check: Only Super Admin credentials can access admin routes.

4️⃣ Main Role & Logout Flow
a. Logout Delay

Current: Blank screen 5–10 sec → home page.

Fix: Properly clear session/token and redirect immediately:

logout() {
  sessionStorage.clear();
  navigate('/home'); // or window.location.href = '/';
}


If there’s a 5–10 sec blank screen, check:

Heavy DB calls on logout

Slow frontend state reset

b. Login Issues

Observed: Sometimes Company/User cannot log in even after registration.

Possible Causes:

Race Condition: Registration happens but DB entry not committed yet.

Unique ID/Token Issue: Unique ID generated but not stored correctly.

Frontend Cache: Old session or cookies prevent login.

Incorrect Role Assignment: Users trying to access routes without proper roles.

Fix:

Ensure DB commit before returning success.

Validate roles and IDs after registration.

Use proper async/await in backend.

c. Unique ID Generation

Make sure it’s stored before login attempt.

Example:

const newUser = await User.create({ ...data, uniqueId: generateId() });
await newUser.save();

✅ Summary of Immediate Fixes

Company Removal – Confirm modal + delete from DB + remove card dynamically.

Button Visibility – Show/Hide based on user role.

Super Admin Form – Separate route, accessible only to you.

Logout Delay – Clear session, redirect immediately.

Login Issues – Ensure DB commit, proper unique ID, role validation.

Analytics & Dashboard – Use backend aggregation, show real-time stats.